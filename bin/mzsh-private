#!/usr/bin/env bash
set -euo pipefail

# mzsh-private: manage ~/.privaterc file syncing with 1Password
# This allows users to keep a single private shell config file synced across machines

PRIVATE_FILE="$HOME/.privaterc"
PRIVATE_ITEM="mzsh-private (do not edit)"

# Source config utilities
MZSH_HOME="${MZSH_HOME:-$HOME/.mzsh}"
source "$MZSH_HOME/lib/config.sh"

# Detect available providers
detect_provider() {
  if command -v op >/dev/null 2>&1; then echo op; return; fi
  if command -v bw >/dev/null 2>&1; then echo bw; return; fi
  if command -v lpass >/dev/null 2>&1; then echo lpass; return; fi
  return 1
}

# Get provider: use config preference or auto-detect
get_provider() {
  local configured_provider
  configured_provider=$(config_get "secrets_provider" "")
  
  if [[ -n "$configured_provider" ]]; then
    echo "$configured_provider"
  else
    detect_provider || true
  fi
}

PROVIDER=$(get_provider) || PROVIDER=""

usage() {
  cat >&2 << 'EOF'
Usage: mzsh private <subcommand> [options]

Subcommands:
  pull  Fetch ~/.privaterc from secrets provider (create if missing)
  push  Push ~/.privaterc to secrets provider

Supported Providers:
  op      1Password CLI
  bw      Bitwarden CLI
  lpass   LastPass CLI

Examples:
  mzsh private pull
  mzsh private push

The ~/.privaterc file is automatically sourced when your shell starts.
EOF
}

check_provider() {
  if [[ -z "$PROVIDER" ]]; then
    echo "Error: No secrets provider found" >&2
    echo "" >&2
    echo "Please install and configure one of the supported providers:" >&2
    echo "  - 1Password CLI: mzsh secrets install op" >&2
    echo "  - Bitwarden CLI: mzsh secrets install bw" >&2
    echo "  - LastPass CLI: mzsh secrets install lpass" >&2
    echo "" >&2
    echo "After installation, sign in to your provider:" >&2
    echo "  op signin       # for 1Password" >&2
    echo "  bw login       # for Bitwarden" >&2
    echo "  lpass login    # for LastPass" >&2
    exit 1
  fi
}

require() { command -v "$1" >/dev/null 2>&1 || { echo "Missing dependency: $1" >&2; exit 1; }; }

pull() {
  check_provider
  
  case "$PROVIDER" in
    op)
      require op
      
      # Try to fetch existing item
      if op item list --format=json 2>/dev/null | jq -e --arg name "$PRIVATE_ITEM" '.[] | select(.title == $name)' >/dev/null 2>&1; then
        # Get the item and extract the note
        op item get "$PRIVATE_ITEM" --format=json 2>/dev/null | jq -r '.notes // ""' > "$PRIVATE_FILE"
        echo "[mzsh] Pulled ~/.privaterc from 1Password" >&2
      else
        # Create new empty file
        cat > "$PRIVATE_FILE" << 'TEMPLATE'
# ~/.privaterc - Private shell configuration
# This file is synced with 1Password across your machines
# Edit this file and run: mzsh private push

# Add your private environment variables, aliases, and functions here
# Example:
# export PRIVATE_TOKEN="your-secret-token"
# alias myalias="command"

TEMPLATE
        echo "[mzsh] Created new ~/.privaterc (not yet in 1Password)" >&2
        echo "[mzsh] Edit it and run: mzsh private push" >&2
      fi
      chmod 600 "$PRIVATE_FILE"
      ;;
    *)
      echo "Unknown provider: $PROVIDER" >&2
      return 1
      ;;
  esac
}

push() {
  check_provider
  
  if [[ ! -f "$PRIVATE_FILE" ]]; then
    echo "File not found: $PRIVATE_FILE" >&2
    echo "Run 'mzsh private pull' first to create it" >&2
    return 1
  fi
  
  case "$PROVIDER" in
    op)
      require op
      
      local content
      content=$(cat "$PRIVATE_FILE")
      
      # Check if item exists
      if op item list --format=json 2>/dev/null | jq -e --arg name "$PRIVATE_ITEM" '.[] | select(.title == $name)' >/dev/null 2>&1; then
        # Update existing item
        # We need to use a temporary file because op item edit doesn't support stdin for notes
        local tmp_file
        tmp_file=$(mktemp)
        cat "$PRIVATE_FILE" > "$tmp_file"
        op item edit "$PRIVATE_ITEM" --notes "$(cat "$tmp_file")" 2>/dev/null || true
        rm -f "$tmp_file"
        echo "[mzsh] Updated ~/.privaterc in 1Password" >&2
      else
        # Create new item with the file content as notes
        op item create --category secure_note --title "$PRIVATE_ITEM" --notes "$(cat "$PRIVATE_FILE")" 2>/dev/null || true
        echo "[mzsh] Created ~/.privaterc in 1Password" >&2
      fi
      ;;
    *)
      echo "Unknown provider: $PROVIDER" >&2
      return 1
      ;;
  esac
}

subcmd="${1:-pull}"
shift || true

case "$subcmd" in
  pull)
    pull
    ;;
  push)
    push
    ;;
  *)
    usage
    exit 1
    ;;
esac
